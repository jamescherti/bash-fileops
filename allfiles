#!/usr/bin/env bash
#
# Requirements: rg (ripgrep) or fd or grep
# Author: James Cherti
# URL: https://github.com/jamescherti/bash-stdops
#
# Description:
# ------------
# Recursively search the specified directory and print the list of file paths to
# standard output. By default, it ignores:
#   - `.git` directories,
#   - files that match `.gitignore` rules,
#   - and binary files.
#
# License:
# --------
# Copyright (C) 2012-2024 James Cherti
#
# Distributed under terms of the GNU General Public License version 3.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

set -euf -o pipefail

if [[ $# -ne 1 ]]; then
  echo "Recursively search the specified directory and print the list of file "
  echo "paths."
  echo "(By default, it ignores '.git' and '.svn' directories, files matching "
  echo "'.gitignore' rules, and binary files.)"
  echo
  echo "Usage: $0 <dir>" >&2
  echo
  exit 1
fi

DIR="$1"
if ! [[ -d "$DIR" ]]; then
  echo "Error: The specified directory does not exist: $DIR" >&2
  exit 1
fi

LIST_METHODS=(fd git find)

METHOD_EXECUTED=""
for METHOD in "${LIST_METHODS[@]}"; do
  if [[ $METHOD = "rg" ]] && type -P rg &>/dev/null; then
    METHOD_EXECUTED="rg"
    RG_CMD=(rg --hidden --no-messages --color=never --no-heading --files
      --no-ignore)
    RG_CMD+=(--glob '!.git')
    RG_CMD+=(--glob '!.svn')
    RG_CMD+=("--" "$DIR")
    "${RG_CMD[@]}"
    break
  elif [[ $METHOD = "fd" ]] && type -P fd &>/dev/null; then
    METHOD_EXECUTED="fd"
    RG_CMD=(fd --type f --hidden --color=never --exclude .git --exclude .svn
      . "$DIR" --no-ignore)
    "${RG_CMD[@]}" | qparallel path-is -sp '{}' text
    break
  elif [[ $METHOD = "git" ]] && type -P git &>/dev/null \
    && git -C . rev-parse --is-inside-work-tree; then
    METHOD_EXECUTED="git"
    git ls-files "$DIR" | qparallel path-is -sp '{}' text
    break
  elif [[ $METHOD = "find" ]] && type -P find &>/dev/null; then
    METHOD_EXECUTED="find"
    RG_CMD=(find)
    RG_CMD+=("$DIR")
    RG_CMD+=(-type f)
    RG_CMD+=(-a)
    RG_CMD+=(-not -iwholename '*/.svn/*')
    RG_CMD+=("-a")
    RG_CMD+=(-not -iwholename '*/.git/*')
    RG_CMD+=(-prune)
    RG_CMD+=(-print)
    "${RG_CMD[@]}" | qparallel path-is -sp '{}' text
    break
  fi
done

if [[ $METHOD_EXECUTED = "" ]]; then
  echo "Error: One of the following commands is required: rg, fd, or find" >&2
  exit 1
# else
#   echo "[INFO] Successfully executed: $METHOD_EXECUTED" >&2
fi
